trigger:
  branches:
    exclude:
      - docs
      - gh-pages

schedules:
  - cron: "10 4 * * 6"
    displayName: "Weekly"
    branches:
      include:
        - main

variables:
  - name: vcpkg.commit
    value: "14e7bb4ae24616ec54ff6b2f6ef4e8659434ea44" # mainstream 2022.05.10
  - name: vcpkg.feature.flags
    value: "registries,binarycaching"
  - name: vcpkg.default.binary.cache
    value: $(Build.BinariesDirectory)/vcpkg-caches

jobs:
  - job: Build
    pool:
      vmImage: "windows-2022" # https://github.com/actions/virtual-environments/blob/main/images/win/Windows2022-Readme.md
    strategy:
      matrix:
        release_x64:
          build.platform: x64
          build.configuration: Release
          vcpkg.target.triplet: x64-windows
        debug_x64:
          build.platform: x64
          build.configuration: Debug
          vcpkg.target.triplet: x64-windows
        # debug_x86:
        #   build.platform: Win32
        #   build.configuration: Debug
        #   vcpkg.target.triplet: x86-windows
    steps:
      - powershell: New-Item -Type Directory -Force ${env:VCPKG_DEFAULT_BINARY_CACHE}
      # - task: PowerShell@2
      #   inputs:
      #     filePath: "scripts/download_mp4.ps1"
      #   displayName: "Download: test MP4 files"
      - task: Cache@2
        inputs:
          key: "2022-07 | vcpkg | $(build.platform)"
          path: $(vcpkg.default.binary.cache)
      - task: run-vcpkg@0
        displayName: "Install: Vcpkg"
        inputs:
          vcpkgGitCommitId: $(vcpkg.commit)
          vcpkgArguments: "ms-gsl spdlog directxtex directxtk directxmath directx-headers catch2 glfw3 egl-registry opengl-registry"
        env:
          VCPKG_DEFAULT_TRIPLET: $(vcpkg.target.triplet)
      - task: CMake@1
        displayName: "CMake: Configure/Generate"
        inputs:
          cmakeArgs: "--preset=$(vcpkg.target.triplet)-debug -DCMAKE_INSTALL_PREFIX:PATH=$(Build.BinariesDirectory)/install"
          workingDirectory: $(Build.SourcesDirectory)
      - task: VSBuild@1
        displayName: "Build: VSBuild"
        inputs:
          solution: build-$(vcpkg.target.triplet)/learning-media-foundation.sln
          platform: "$(build.platform)" # x64|Win32
          configuration: "$(build.configuration)" # Debug|Release
          clean: true
          msbuildArchitecture: "x64"
          logFileVerbosity: detailed
      - task: CMake@1
        displayName: "Build: CMake Preset"
        inputs:
          cmakeArgs: "--build --preset=$(vcpkg.target.triplet)-debug"
          workingDirectory: $(Build.SourcesDirectory)
      - task: CMake@1
        inputs:
          cmakeArgs: "--build --target install --preset=$(vcpkg.target.triplet)-debug"
          workingDirectory: $(Build.SourcesDirectory)
      - powershell: |
          ./media_test_suite.exe --success
        workingDirectory: $(Build.BinariesDirectory)/install/bin

  - job: Analysis
    dependsOn: Build
    pool:
      vmImage: "windows-2022"
    steps:
      - task: Cache@2
        inputs:
          key: "2022-07 | vcpkg | x64"
          path: $(vcpkg.default.binary.cache)
      - task: Cache@2
        inputs:
          key: "2022-08 | sonarqube"
          path: "C:/Users/VssAdministrator/.sonar" # $(Pipeline.Workspace)/.sonarqube
      - task: run-vcpkg@0
        displayName: "Install: Vcpkg"
        inputs:
          vcpkgGitCommitId: $(vcpkg.commit)
          vcpkgArguments: "catch2 ms-gsl spdlog directxtex directxtk directxmath directx-headers glfw3 egl-registry opengl-registry"
        env:
          VCPKG_DEFAULT_TRIPLET: x64-windows
      - task: SonarCloudPrepare@1
        inputs:
          SonarCloud: "luncliff-sonarcloud"
          organization: "luncliff-github"
          projectKey: "luncliff-media"
          scannerMode: "CLI"
          configMode: "file"
      # https://github.com/SonarSource/sonarcloud_example_cpp-cmake-windows-otherci
      # https://tomaxworthy.medium.com/setting-up-sonar-cloud-with-azure-devops-pipelines-for-net-core-98700a5be8cc
      - task: PowerShell@2
        inputs:
          filePath: "scripts/setup-sonar-build-wrapper.ps1"
        displayName: "Setup: Sonar Build Wrapper"
      - task: CMake@1
        displayName: "CMake: Configure/Generate"
        inputs:
          cmakeArgs: "--preset=x64-windows-debug"
          workingDirectory: $(Build.SourcesDirectory)
      # https://docs.sonarqube.org/latest/analysis/languages/cfamily/
      # https://docs.sonarqube.org/latest/analysis/scan/sonarscanner-for-azure-devops/
      # https://docs.sonarqube.org/latest/analysis/scan/sonarscanner-for-msbuild/
      - powershell: |
          $env:Path="C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Msbuild\Current\Bin;$env:Path"
          MSBuild --version
          ./build-wrapper-win-x86-64.exe --out-dir "$(Build.SourcesDirectory)/bw-output" `
            MSBuild build-x64-windows/learning-media-foundation.sln `
            /t:rebuild /p:platform="x64" /p:configuration="Debug"
        displayName: "Run Sonar Build Wrapper"
      # https://docs.sonarqube.org/latest/analysis/generic-test/
      - powershell: |
          New-Item -Type Directory -Path "$(Build.SourcesDirectory)/install" -Force
          ./media_test_suite.exe --reporter=sonarqube --out "$(Build.SourcesDirectory)/install/sonar-test-report.xml"
        workingDirectory: build-x64-windows/Debug
        displayName: "Run Tests"
      # - task: PowerShell@2
      #   displayName: "Create XML from coverage"
      #   inputs:
      #     filePath: "scripts/create-coverage-xml.ps1"
      - task: SonarCloudAnalyze@1
        continueOnError: true
      - task: SonarCloudPublish@1
        inputs:
          pollingTimeoutSec: "300"
        continueOnError: true
